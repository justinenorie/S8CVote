// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// TODO: Setup the schema and query of database for voting management system here

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String   @id @default(uuid())
  studentID String   @unique
  fullname  String
  timestamp DateTime @default(now())
  token     String?

  // Relations
  votes Vote[]
}

model Admin {
  id        String  @id @default(uuid())
  adminUser String  @unique
  fullname  String
  password  String
  token     String?
}

model Category {
  id              String @id @default(uuid())
  election        String
  description     String
  maxVotesAllowed Int
  status          String

  // Relations
  candidates Candidate[]
  votes      Vote[]
}

model Candidate {
  id          String @id @default(uuid())
  name        String
  description String

  // Relations
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  votes      Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
}
